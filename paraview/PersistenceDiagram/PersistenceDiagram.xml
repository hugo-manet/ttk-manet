
<ServerManagerConfiguration>
  <!-- This is the server manager configuration XML. It defines the interface to
       our new filter. As a rule of thumb, try to locate the configuration for
       a filter already in ParaView (in Servers/ServerManager/Resources/*.xml)
       that matches your filter and then model your xml on it -->
  <ProxyGroup name="filters">
    <SourceProxy
      name="ttkPersistenceDiagram"
      class="ttkPersistenceDiagram"
      label="TTK PersistenceDiagram">
      <Documentation
        long_help="TTK plugin for the computation of persistence diagrams."
        short_help="TTK plugin for the computation of persistence diagrams.">
        TTK plugin for the computation of persistence diagrams.

This plugin computes the persistence diagram of the extremum-saddle pairs
of an input scalar field. The X-coordinate of each pair corresponds to its
birth, while its smallest and highest Y-coordinates correspond to its birth
and death respectively.

In practice, the diagram is represented by a vtkUnstructuredGrid. Each
vertex of this mesh represent a critical point of the input data. It is
associated with point data (vertexId, critical type). Each vertical edge
of this mesh represent a persistence pair. It is associated with cell data
(persistence of the pair, critical index of the extremum of the pair).
The diagonal of the diagram can be filtered out by considering its
PairIdentifier value (set at -1).

Persistence diagrams are useful and stable concise representations of the
topological features of a data-set. It is useful to fine-tune persistence
thresholds for topological simplification or for fast similarity
estimations for instance.

See also ContourForests, PersistenceCurve, ScalarFieldCriticalPoints,
TopologicalSimplification.
      </Documentation>

      <InputProperty
        name="Input"
        command="SetInputConnection">
        <ProxyGroupDomain name="groups">
          <Group name="sources"/>
          <Group name="filters"/>
        </ProxyGroupDomain>
        <DataTypeDomain name="input_type">
          <DataType value="vtkDataSet"/>
        </DataTypeDomain>
        <InputArrayDomain name="input_scalars" number_of_components="1">
          <Property name="Input" function="FieldDataSelection" />
        </InputArrayDomain>
        <Documentation>
          Data-set to process.
          TTK assumes that the input dataset is made of only one connected component.
          If it's not the case, you can use the filter "Connectivity" (and select "Extract Largest Region").
        </Documentation>
      </InputProperty>

      <StringVectorProperty 
        name="ScalarFieldNew" 
        label="Scalar Field" 
        command="SetInputArrayToProcess" 
        element_types="0 0 0 0 2" 
        number_of_elements="5" 
        default_values="0"
        >
        <ArrayListDomain
          name="array_list"
          default_values="0">
          <RequiredProperties>
            <Property name="Input" function="Input" />
          </RequiredProperties>
        </ArrayListDomain>
        <Documentation>
          Select the scalar field to process.
        </Documentation>
      </StringVectorProperty>

      <IntVectorProperty
         name="ForceInputOffsetScalarField"
         command="SetForceInputOffsetScalarField"
         label="Force Input Offset Field"
         number_of_elements="1"
         panel_visibility="advanced"
         default_values="0">
        <BooleanDomain name="bool"/>
         <Documentation>
          Check this box to force the usage of a specific input scalar field
          as vertex offset (used to disambiguate flat plateaus).
         </Documentation>
      </IntVectorProperty>

      <StringVectorProperty 
        name="InputOffsetScalarFieldNameNew" 
        label="Input Offset Field" 
        command="SetInputArrayToProcess" 
        element_types="0 0 0 0 2" 
        number_of_elements="5" 
        default_values="1"
        panel_visibility="advanced"
        >
        <ArrayListDomain
          name="array_list"
					default_values="1"
                    >
          <RequiredProperties>
            <Property name="Input" function="Input" />
          </RequiredProperties>
        </ArrayListDomain>
        <Hints>
          <PropertyWidgetDecorator type="GenericDecorator"
            mode="visibility"
            property="ForceInputOffsetScalarField"
            value="1" />
        </Hints>
        <Documentation>
          Select the input offset field (used to disambiguate flat plateaus).
        </Documentation>
      </StringVectorProperty>

      <IntVectorProperty
         name="SaddleConnectors"
         command="SetComputeSaddleConnectors"
         label="Compute saddle-saddle pairs (SLOW!)"
         number_of_elements="1"
         default_values="0" panel_visibility="advanced">
        <BooleanDomain name="bool"/>
         <Documentation>
          Add saddle-saddle pairs in the diagram (SLOW!).
         </Documentation>
      </IntVectorProperty>

      <IntVectorProperty name="ShowInsideDomain"
        label="Embed in Domain"
        command="SetShowInsideDomain"
        number_of_elements="1"
        default_values="0"
        panel_visibility="default">
        <BooleanDomain name="bool"/>
        <Documentation>
          Embed the persistence pairs in the domain.
        </Documentation>
      </IntVectorProperty>

      <PropertyGroup panel_widget="Line" label="Input options">
          <Property name="ScalarFieldNew" />
	      <Property name="ForceInputOffsetScalarField"/>
	      <Property name="InputOffsetScalarFieldNameNew"/>
      </PropertyGroup>

      <PropertyGroup panel_widget="Line" label="Output options">
        <Property name="SaddleConnectors" />
        <Property name="ShowInsideDomain" />
      </PropertyGroup>

      ${DEBUG_WIDGETS}
      <Hints>
        <ShowInMenu category="TTK - Scalar Data" />
      </Hints>
    </SourceProxy>
  </ProxyGroup>
</ServerManagerConfiguration>
